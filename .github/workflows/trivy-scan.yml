name: Container Security Scan

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      scan_status: ${{ steps.check-criticals.conclusion }}  # Fixed here too
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t cncf-cloud-native-security:latest cloud-native-security/.

      - name: Scan Docker image for vulnerabilities
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: cncf-cloud-native-security:latest
          format: json
          output: trivy-results.json
          severity: CRITICAL,HIGH
          exit-code: 0

      - name: Count CRITICAL vulnerabilities and fail if above threshold
        id: check-criticals
        continue-on-error: true
        run: |
          critical_count=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json)
          echo "üîç Found $critical_count CRITICAL vulnerabilities"
          if [ "$critical_count" -gt 15 ]; then
            echo "‚ùå More than 15 critical vulnerabilities found!"
            exit 1
          else
            echo "‚úÖ Vulnerability threshold acceptable."
          fi

      - name: Log in to Docker Hub
        if: steps.check-criticals.conclusion == 'success'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image to Docker Hub
        if: steps.check-criticals.conclusion == 'success'
        run: |
          docker tag cncf-cloud-native-security:latest ${{ secrets.DOCKERHUB_USERNAME }}/cncf-cloud-native-security:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/cncf-cloud-native-security:latest

      - name: Send email if vulnerabilities are found
        if: steps.check-criticals.conclusion == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå Security Scan Failed: Vulnerabilities Detected"
          to: ${{ github.event.head_commit.author.email }}
          from: Security Scanner <${{ secrets.EMAIL_USERNAME }}>
          body: |
            Hello ${{ github.event.head_commit.author.name }},

            Security scan failed for your recent commit to the `${{ github.repository }}` repository.

            üîí Critical or high vulnerabilities were found in the Docker image.

            üìÑ Commit: ${{ github.event.head_commit.message }}
            üë§ Author: ${{ github.event.head_commit.author.name }} <${{ github.event.head_commit.author.email }}>

            üîó View details:
            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          debug: true  # Optional: helps diagnose email issues

      - name: Fail the job explicitly if scan failed
        if: steps.check-criticals.conclusion == 'failure'
        run: exit 1
 
  # deploy:
  #   needs: trivy
  #   if: needs.trivy.result == 'success'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Setup SSH
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

  #     - name: Test SSH manually
  #       run: |
  #         ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo Connected ‚úÖ"
 
  #     - name: Upload Helm chart to server
  #       uses: appleboy/scp-action@v0.1.4
  #       with:
  #         host: ${{ secrets.DEPLOY_HOST }}
  #         username: ${{ secrets.DEPLOY_USER }}
  #         key: ${{ secrets.DEPLOY_KEY }}
  #         source: "cloud-native-security/helm/*"
  #         target: "~/cloud-native-security/helm"
 
  #     - name: Deploy using Helm
  #       uses: appleboy/ssh-action@v1.0.0
  #       with:
  #         host: ${{ secrets.DEPLOY_HOST }}
  #         username: ${{ secrets.DEPLOY_USER }}
  #         key: ${{ secrets.DEPLOY_KEY }}
  #         script: |
  #           echo "‚úÖ Connected to remote server"
 
  #           IMAGE_REPO="${{ secrets.DOCKERHUB_USERNAME }}/cncf-cloud-native-security"
  #           IMAGE_TAG="latest"
 
  #           echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
 
  #           echo "üßπ Cleaning up old Docker images..."
  #           docker images "$IMAGE_REPO" --format "{{.ID}}" | xargs -r docker rmi -f
 
  #           echo "üì• Pulling latest Docker image..."
  #           docker pull "$IMAGE_REPO:$IMAGE_TAG"
 
  #           echo "üöÄ Deploying with Helm (upgrade only)..."
  #           helm upgrade --install cncf-app ~/helm \
  #             --set image.repository=$IMAGE_REPO \
  #             --set image.tag=$IMAGE_TAG \
  #             --namespace cncf \
  #             --create-namespace
 